<?xml version="1.0" encoding="UTF-8"?>
<queries>

<aQuery>
       <region name="Colombia" />
         <marketQuery title="demand of all markets">
            <axis1 name="market">market</axis1>
            <axis2 name="Year">market</axis2>
            <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true()]/demand/node()</xPath>
            <comments/>
         </marketQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />

            <supplyDemandQuery title="building service costs">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="building service output by service">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//
               output-primary[@type='output' (:collapse:)]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="elec gen by region (incl CHP)">
               <axis1 name="region">region</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="true">*[@type='sector' (:collapse:)]//
               *[@type='technology' (:collapse:) and not (@name='elect_td_bld')]/
               *[@type='output' (:collapse:)  and (@name='electricity' or @name='base load generation' or @name='intermediate generation' or 
               @name='subpeak generation' or @name='peak generation' or @name='elect_td_bld')]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
         <supplyDemandQuery title="final energy consumption by sector and fuel">
            <axis1 name="input">input</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn_') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="delivered biomass" to="biomass"/>
                  <rewrite from="elect_td_bld" to="electricity"/>
                  <rewrite from="refined liquids enduse" to="refined liquids"/>
                  <rewrite from="H2 enduse" to="hydrogen"/>
                  <rewrite from="delivered coal" to="coal"/>
                  <rewrite from="elect_td_trn" to="electricity"/>
                  <rewrite from="elect_td_ind" to="electricity"/>
                  <rewrite from="delivered gas" to="gas"/>
                  <rewrite from="wholesale gas" to="gas"/>
                  <rewrite from="refined liquids industrial" to="refined liquids"/>
                  <rewrite from="regional coal" to="coal"/>
                  <rewrite from="regional biomass" to="biomass"/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
         <supplyDemandQuery title="final energy prices">
            <axis1 name="fuel">sector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='wholesale gas' or @name='delivered gas' or
            @name='delivered coal' or @name='delivered biomass' or @name='traditional biomass' or
            @name='elect_td_ind' or @name='elect_td_bld' or @name='elect_td_trn' or
            @name='H2 enduse'or @name='refined liquids industrial' or @name='refined liquids enduse')]/
            cost/text()</xPath>
            <comments/>
         </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="fuel prices to industry">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='wholesale gas' or @name='delivered coal' or
               @name='delivered biomass' or @name='H2 enduse' or @name='elect_td_ind' or
               @name='refined liquids industrial')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="industry primary output by sector">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               output-primary/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="industry total final energy by service">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               *[@type='input' (:collapse:) and (@name='delivered biomass' or @name='delivered coal' or
               @name='H2 enduse' or @name='elect_td_ind' or @name='wholesale gas' or
               @name='refined liquids industrial')]/demand-physical/node()</xPath>
               <comments>process heat cement assigned to cement</comments>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="process heat cement" to="cement"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="refined liquids costs by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='refining')]/*[@type='subsector']/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
         <supplyDemandQuery title="regional primary energy prices">
            <axis1 name="fuel">sector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and (@name='regional oil' or @name='regional natural gas'
            or @name='regional coal' or @name='regional biomass' or @name='nuclearFuelGenIII')]/
            cost/text()</xPath>
            <comments/>
         </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="transport total final energy by service">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='input' (:collapse:) and not (@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
               <comments>pass-through transport sectors assigned to final demands</comments>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="trn_pass_road_bus" to="trn_pass"/>
                     <rewrite from="trn_pass_road_LDV_2W" to="trn_pass"/>
                     <rewrite from="trn_pass_road_LDV" to="trn_pass"/>
                     <rewrite from="trn_pass_road_LDV_4W" to="trn_pass"/>
                     <rewrite from="trn_freight_road" to="trn_freight"/>
                     <rewrite from="trn_pass_road" to="trn_pass"/>
                  </level>
               </labelRewriteList>
            </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
         <supplyDemandQuery title="primary energy consumption by region (avg fossil efficiency)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> <![CDATA[
      	 	 	 declare function local:get-weighted-eff($outputs as node()*) as node()* {
			 	 		   unordered {
			 			     for $year in distinct-values($outputs/physical-output/@vintage)
			 		             let $eff_unweight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                               let $eff_curr := $res/parent::*/following-sibling::input-energy[1]/IO-coefficient[@vintage = $year]
			 		                               (: where $res/physical-output/@vintage = $year :)
			 		                               return $res div $eff_curr),
			 			             $weight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                         (: where $res/physical-output/@vintage = $year :)
			 		                         return $res),
			 			             $eff_weighted := $eff_unweight div $weight
			 		             return element efficiency-weighted {attribute year { $year }, text { $eff_weighted }}
			             		}
			 	 	 };
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 		 (: let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
			 	 		 return
			 	 		 if(local-name($parent) != 'scenario')
			 	 		 then local:append-heirarchy($parent/parent::*, $new_node)
			 	 		 else document { $new_node } :)
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*, $weighted_effs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs (:,
			 	 	 $weighted_eff in $weighted_effs :)
			 	 	 let $new_output :=  (: element tempParent { :)
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output div $weighted_effs[@year=$output/@vintage] }
			 	 		 }(: ,
			 	 		 element keyword {
			 	 			 attribute primary-consumption { (: if($output/parent::*/following-sibling::keyword[fn:exists(@primary-renewable)])
			 	 						 then :) $output/parent::*/following-sibling::keyword/@primary-renewable
			 	 						 (: else $output/parent::*/parent::*/@name :)
			 	 		       }
			 	 		 } :)
			 	 	 (: } :)
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 (:where $output/@vintage = $weighted_eff/@year:)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:check-keyword($values as node()*) as node()* {
			 	 	 	unordered {
			 	 		for $value in $values
			 	 		let $input := $value/parent::*/parent::*,
			 	 		    $keyword_name :=
			 	 		        (: if($input/following-sibling::keyword[fn:exists(@primary-consumption)])
			 	 			then :) $input/following-sibling::keyword/@primary-consumption
			 	 			(: else $input/@name :), 
			 	 		    $new_parent := element {local-name($input)} {$input/@*, 
			 	 			$value/parent::*,
			 	 		        element keyword { attribute primary-consumption {$keyword_name} }
			 	 		        },
			 	 		    $new_root := local:append-heirarchy($input/parent::*, $new_parent)
			 	 		return $new_root//text()
			 	 		}
			 	 	};
			 	 
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 (: unordered { :)
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '),
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
			 	 	 local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or starts-with(@name, 'elec_'))]//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 central production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 forecourt production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get the primaries :)
	 	 						(: local:check-keyword( :) $currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy[not(contains(@name, 'water'))]/demand-physical/text() (: ) :)
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
			 	 	 (: } :)
	 	 }; 
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))
                 ]]>
            </xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="input">
                  <rewrite from="traditional biomass" to="j traditional biomass"/>
                  <rewrite from="geothermal-elect" to="i geothermal"/>
                  <rewrite from="biomass" to="d biomass"/>
                  <rewrite from="total biomass" to="d biomass"/>
                  <rewrite from="regional biomassOil" to="d biomass"/>
                  <rewrite from="regional corn for ethanol" to="d biomass"/>
                  <rewrite from="wholesale gas" to=""/>
                  <rewrite from="nuclear-H2" to="e nuclear"/>
                  <rewrite from="natural gas" to="b natural gas"/>
                  <rewrite from="wind-elect" to="g wind"/>
                  <rewrite from="exotic-elect" to="j breakthrough"/>
                  <rewrite from="elect_td_ind" to=""/>
                  <rewrite from="solar-elect" to="h solar"/>
                  <rewrite from="solar-H2" to="h solar"/>
                  <rewrite from="regional natural gas" to=""/>
                  <rewrite from="coal" to="c coal"/>
                  <rewrite from="crude oil" to="a oil"/>
                  <rewrite from="hydro-elect" to="f hydro"/>
                  <rewrite from="nuclear-elect" to="e nuclear"/>
                  <rewrite from="traded unconventional oil" to="a oil"/>
                  <rewrite from="wind-H2" to="g wind"/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
<supplyDemandQuery title="Final energy by detailed end-use sector and fuel">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or (exists(child::keyword/@final-energy)))]//*[@type='input' and not(contains(@name, 'trn') or @name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='renewable' or @name='oil-credits')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
			<supplyDemandQuery title="refined liquids production by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='refining')]/*[@type='subsector']//
               output-primary[@type='output']/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="elec prices by sector">
               <axis1 name="fuel">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld' or @name='elect_td_ind'
               or @name='elect_td_trn')]/cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
 </aQuery>

<aQuery>
		<all-regions/>
         <marketQuery title="prices of all markets">
            <axis1 name="market">market</axis1>
            <axis2 name="Year">market</axis2>
            <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true()]/price/node()</xPath>
         </marketQuery>
 </aQuery>

<aQuery>
       <region name="Colombia" />
			<supplyDemandQuery title="elec gen by gen tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:) and
               (@name='electricity' or @name='elect_td_bld' or @name='industrial energy use')]/
               *[@type='subsector']/*[@type='technology' and not (@name='electricity' or @name='elect_td_bld')]/
               *[@type='output' and (@name='electricity' or @name='elect_td_bld')]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
 </aQuery>

 <aQuery>
       <region name="Colombia" />
 <supplyDemandQuery title="ag production by tech">
            <axis1 name="technology">technology[@name]</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/
            *[@type='subsector']/*[@type='technology']/
            output-primary/physical-output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
 </aQuery>

 <aQuery>
       <region name="Colombia" />
 <supplyDemandQuery title="land allocation by crop and water source">
            <axis1 name="water">water[@name]</axis1>
            <axis2 name="Year">land-allocation[@year]</axis2>
            <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false"> <![CDATA[
            declare function local:nest-land-category($leaf as node(), $level as xs:string, $child as node()*) as node() {
                let $attrMatch := $leaf/@*[name()=$level],
                    $attrValue := if(exists($attrMatch)) then string($attrMatch) else "NA"
                return element { $level } {
                    attribute name { $attrValue },
                    $child
                }
            };
            declare function local:run-nest-land-categories($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
                let $regionsG := if(not($regions[1] = 'Global'))
                                 then $regions
                                 else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
                return
                    for $scenario in $scenarios, 	    
                        $region in $regionsG 	
                    let $scenario_split := tokenize($scenario, ' '), 	    
                        $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                        $landLeaves := $currTree//LandNode[@name='root' or @type='LandNode' (:collapse:)]//LandLeaf,
                        $ret := document {
                            element scenario {
                                attribute name { $scenario_split[1] },
                                attribute date { $scenario_split[2] },
                                element region {
                                    attribute type { "region" },
                                    attribute name { $region },
                                    for $leaf in $landLeaves
                                    (: TODO: not sure why I have to explicitly copy the land-allocation :)
                                    let $copy := for $landAlloc in $leaf/land-allocation
                                                 return element land-allocation {
                                                    $landAlloc/@*,
                                                    text { $landAlloc/text() }
                                                 }
                                    (: A user could choose to nest by recursively calling for any of: ("crop", "land-region", "water", "mgmt-tech") :)
                                    return local:nest-land-category($leaf, "crop", local:nest-land-category($leaf, "water", $copy))
                                }
                            }
                        }
                    return $ret//text()
            };
            local:run-nest-land-categories((:scenarios:), (:regions:), (:collection:))
            ]]>
            </xPath>
            <comments/>
    </supplyDemandQuery>
 </aQuery>

 <aQuery>
       <region name="Colombia" />
  <supplyDemandQuery title="biophysical water demand by crop type and land region">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">AgSupplySector/*[@type='subsector']//*[@type='input' and (@name='biophysical water consumption')]/
               demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
 </aQuery>

 <aQuery>
       <region name="Colombia" />
<supplyDemandQuery title="Land Use Change Emission (future)">
         <axis1 name="land-use-change-emission">LandLeaf</axis1>
         <axis2 name="Year">land-use-change-emission[@year]</axis2>
         <xPath buildList="true" dataName="land-use-change-emission" group="false" sumAll="true">/LandNode[@name='root' or @type='LandNode' (: collapse :)]//land-use-change-emission[@year>1975]/text()</xPath>
         <comments/>      
</supplyDemandQuery>
      </aQuery>

<aQuery>
       <region name="Colombia" />
  <emissionsQueryBuilder title="CO2 emissions by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type='sector']//CO2/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
     </aQuery>

<aQuery>
       <region name="Colombia" />
         <emissionsQueryBuilder title="nonCO2 emissions by sector">
            <axis1 name="GHG">GHG</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']//*[@type = 'GHG']/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
     </aQuery>
	  
     <aQuery>
		<region name="Colombia" />
         <gdpQueryBuilder title="GDP MER by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">gdp-mer</axis2>
            <xPath buildList="true" dataName="gdp-mer" group="false" sumAll="false">GDP/gdp-mer/text()</xPath>
            <comments/>
         </gdpQueryBuilder>
      </aQuery>

     <aQuery>
		<region name="Colombia" />
         <demographicsQuery title="Population by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">populationMiniCAM</axis2>
            <xPath buildList="true" dataName="total-population" group="false" sumAll="false">demographics/populationMiniCAM/total-population/node()</xPath>
            <comments/>
         </demographicsQuery>
      </aQuery>

<aQuery>
		<region name="Colombia" />
      <supplyDemandQuery title="Electricity generation by aggregate technology ORDERED SUBSECTORS">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or @name='industrial energy use' )]//*[@type = 'technology' and not (@name='elect_td_bld' or @name='electricity')]/*[@type='output' (:collapse:) and (@name='electricity' or @name='elect_td_bld')]/physical-output/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="technology">
               <rewrite from="gas (CC CCS)" to="d Gas w/CCS"/>
               <rewrite from="hydro" to="k Hydro"/>
               <rewrite from="biomass (conv)" to="g Biomass"/>
               <rewrite from="rooftop_pv" to="m Solar"/>
               <rewrite from="PV" to="m Solar"/>
               <rewrite from="coal (IGCC)" to="a Coal"/>
               <rewrite from="biomass (conv CCS)" to="h Biomass w/CCS"/>
               <rewrite from="hydrogen cogen" to="n CHP"/>
               <rewrite from="CSP_storage" to="m Solar"/>
               <rewrite from="coal cogen" to="n CHP"/>
               <rewrite from="biomass (IGCC)" to="g Biomass"/>
               <rewrite from="gas cogen" to="n CHP"/>
               <rewrite from="coal (conv pul CCS)" to="b Coal w/CCS"/>
               <rewrite from="biomass (IGCC CCS)" to="h Biomass w/CCS"/>
               <rewrite from="geothermal" to="j Geothermal"/>
               <rewrite from="refined liquids (CC CCS)" to="f Oil w/CCS"/>
               <rewrite from="refined liquids (steam/CT)" to="e Oil"/>
               <rewrite from="gas (CC)" to="c Gas"/>
               <rewrite from="CSP" to="m Solar"/>
               <rewrite from="coal (IGCC CCS)" to="b Coal w/CCS"/>
               <rewrite from="Gen_II_LWR" to="i Nuclear"/>
               <rewrite from="coal (conv pul)" to="a Coal"/>
               <rewrite from="gas (steam/CT)" to="c Gas"/>
               <rewrite from="wind_storage" to="l Wind"/>
               <rewrite from="PV_storage" to="m Solar"/>
               <rewrite from="Gen_III" to="i Nuclear"/>
               <rewrite from="refined liquids (CC)" to="e Oil"/>
               <rewrite from="refined liquids cogen" to="n CHP"/>
               <rewrite from="biomass cogen" to="n CHP"/>
               <rewrite from="wind" to="l Wind"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
</aQuery>


<aQuery>
		<region name="Colombia" />
      <supplyDemandQuery title="Electricity generation by aggregate technology">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or @name='industrial energy use' )]//*[@type = 'technology' and not (@name='elect_td_bld' or @name='electricity')]/*[@type='output' (:collapse:) and (@name='electricity' or @name='elect_td_bld')]/physical-output/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="technology">
               <rewrite from="gas (CC CCS)" to="Gas w/CCS"/>
               <rewrite from="hydro" to="Hydro"/>
               <rewrite from="biomass (conv)" to="Biomass"/>
               <rewrite from="rooftop_pv" to="Solar"/>
               <rewrite from="PV" to="Solar"/>
               <rewrite from="coal (IGCC)" to="Coal"/>
               <rewrite from="biomass (conv CCS)" to="Biomass w/CCS"/>
               <rewrite from="hydrogen cogen" to="CHP"/>
               <rewrite from="CSP_storage" to="Solar"/>
               <rewrite from="coal cogen" to="CHP"/>
               <rewrite from="biomass (IGCC)" to="Biomass"/>
               <rewrite from="gas cogen" to="CHP"/>
               <rewrite from="coal (conv pul CCS)" to="Coal w/CCS"/>
               <rewrite from="biomass (IGCC CCS)" to="Biomass w/CCS"/>
               <rewrite from="geothermal" to="Geothermal"/>
               <rewrite from="refined liquids (CC CCS)" to="Oil w/CCS"/>
               <rewrite from="refined liquids (steam/CT)" to="Oil"/>
               <rewrite from="gas (CC)" to="Gas"/>
               <rewrite from="CSP" to="Solar"/>
               <rewrite from="coal (IGCC CCS)" to="Coal w/CCS"/>
               <rewrite from="Gen_II_LWR" to="Nuclear"/>
               <rewrite from="coal (conv pul)" to="Coal"/>
               <rewrite from="gas (steam/CT)" to="Gas"/>
               <rewrite from="wind_storage" to="Wind"/>
               <rewrite from="PV_storage" to="Solar"/>
               <rewrite from="Gen_III" to="Nuclear"/>
               <rewrite from="refined liquids (CC)" to="Oil"/>
               <rewrite from="refined liquids cogen" to="CHP"/>
               <rewrite from="biomass cogen" to="CHP"/>
               <rewrite from="wind" to="Wind"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
</aQuery>


	<aQuery>
      <region name="Colombia" />
      	<supplyDemandQuery title="total final energy by aggregate sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' (:collapse:) and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn_') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="sector">
                  <rewrite from="trn_pass_road_bus" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV" to="transportation"/>
                  <rewrite from="trn_freight" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV_2W" to="transportation"/>
                  <rewrite from="N fertilizer" to="industry"/>
                  <rewrite from="resid heating" to="building"/>
                  <rewrite from="industrial feedstocks" to="industry"/>
                  <rewrite from="comm heating" to="building"/>
                  <rewrite from="trn_aviation_intl" to="transportation"/>
                  <rewrite from="industrial energy use" to="industry"/>
                  <rewrite from="comm cooling" to="building"/>
                  <rewrite from="trn_shipping_intl" to="transportation"/>
                  <rewrite from="trn_pass_road_LDV_4W" to="transportation"/>
                  <rewrite from="trn_freight_road" to="transportation"/>
                  <rewrite from="comm others" to="building"/>
                  <rewrite from="trn_pass" to="transportation"/>
                  <rewrite from="process heat cement" to="industry"/>
                  <rewrite from="resid cooling" to="building"/>
                  <rewrite from="cement" to="industry"/>
                  <rewrite from="resid others" to="building"/>
                  <rewrite from="trn_pass_road" to="transportation"/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
      </aQuery>
      
<aQuery>
      <region name="Colombia" /> 
		<supplyDemandQuery title="primary energy consumption by region (direct equivalent) ORDERED SUBSECTORS">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> <![CDATA[
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs 
			 	 	 let $new_output :=  
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output }
			 	 		 }
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
					 	 	 	local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get the primaries :)
	 	 						$currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy/demand-physical/text()
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
	 	 }; 
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))
                 ]]>
            </xPath>
            <comments/>
            <labelRewriteList append-values="false">
<level name="input">
                  <rewrite from="traditional biomass" to="j traditional biomass"/>
                  <rewrite from="geothermal-elect" to="i geothermal"/>
                  <rewrite from="biomass" to="d biomass"/>
                  <rewrite from="total biomass" to="d biomass"/>
                  <rewrite from="regional biomassOil" to="d biomass"/>
                  <rewrite from="regional corn for ethanol" to="d biomass"/>
                  <rewrite from="wholesale gas" to=""/>
                  <rewrite from="nuclear-H2" to="e nuclear"/>
                  <rewrite from="natural gas" to="b natural gas"/>
                  <rewrite from="wind-elect" to="g wind"/>
                  <rewrite from="exotic-elect" to="j breakthrough"/>
                  <rewrite from="elect_td_ind" to=""/>
                  <rewrite from="k new" to="k new"/>
                  <rewrite from="solar-elect" to="h solar"/>
                  <rewrite from="solar-H2" to="h solar"/>
                  <rewrite from="regional natural gas" to=""/>
                  <rewrite from="coal" to="c coal"/>
                  <rewrite from="crude oil" to="a oil"/>
                  <rewrite from="hydro-elect" to="f hydro"/>
                  <rewrite from="nuclear-elect" to="e nuclear"/>
                  <rewrite from="traded unconventional oil" to="a oil"/>
                  <rewrite from="wind-H2" to="g wind"/>
                  <rewrite from="seawater" to=""/>
                  <rewrite from="water_td_pri_C" to=""/>
                  <rewrite from="water_td_pri_W" to=""/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
</aQuery>



	<aQuery>
      <region name="Colombia" />
      <supplyDemandQuery title="water withdrawals by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' (:collapse:) and contains(@name,'water_td')
         and ends-with(@name,'_W')]/demand-physical/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="elec_coal (conv pul)" to="electricity"/>
               <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
               <rewrite from="elec_gas (CC)" to="electricity"/>
               <rewrite from="elec_gas (CC CCS)" to="electricity"/>
               <rewrite from="elec_CSP" to="electricity"/>
               <rewrite from="elec_Gen_II_LWR" to="electricity"/>
               <rewrite from="elec_refined liquids (CC)" to="electricity"/>
               <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
               <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
               <rewrite from="elec_Gen_III" to="electricity"/>
               <rewrite from="elec_geothermal" to="electricity"/>
               <rewrite from="elec_biomass (conv)" to="electricity"/>
               <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
               <rewrite from="elec_gas (steam/CT)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
               <rewrite from="elec_coal (IGCC)" to="electricity"/>
               <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
               <rewrite from="elec_CSP_storage" to="electricity"/>
			   <rewrite from="Beef" to="livestock"/>
			   <rewrite from="Dairy" to="livestock"/>
			   <rewrite from="Poultry" to="livestock"/>
			   <rewrite from="SheepGoat" to="livestock"/>
			   <rewrite from="Pork" to="livestock"/>
			   <rewrite from="unconventional oil production" to="mining"/>
			   <rewrite from="nuclearFuelGenIII" to="mining"/>
			   <rewrite from="nuclearFuelGenII" to="mining"/>
			   <rewrite from="regional oil" to="mining"/>
			   <rewrite from="regional coal" to="mining"/>
			   <rewrite from="regional natural gas" to="mining"/>
			   <rewrite from="biomass" to="biomass"/>
			   <rewrite from="FiberCrop" to="agriculture"/>
			   <rewrite from="PalmFruit" to="agriculture"/>
			   <rewrite from="SugarCrop" to="agriculture"/>
			   <rewrite from="Corn" to="agriculture"/>
			   <rewrite from="FodderHerb" to="agriculture"/>
			   <rewrite from="MiscCrop" to="agriculture"/>
			   <rewrite from="OilCrop" to="agriculture"/>
			   <rewrite from="Rice" to="agriculture"/>
			   <rewrite from="FodderGrass" to="agriculture"/>
			   <rewrite from="OtherGrain" to="agriculture"/>
			   <rewrite from="Root_Tuber" to="agriculture"/>
			   <rewrite from="Wheat" to="agriculture"/>
			   <rewrite from="municipal water" to="municipal"/>
			   <rewrite from="industry" to="industry"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      </aQuery>
	  
	<aQuery>
      <region name="Colombia" />
      <supplyDemandQuery title="water withdrawals by crop">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' (:collapse:) and contains(@name,'water_td')
         and ends-with(@name,'_W')]/demand-physical/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="elec_coal (conv pul)" to="electricity"/>
               <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
               <rewrite from="elec_gas (CC)" to="electricity"/>
               <rewrite from="elec_gas (CC CCS)" to="electricity"/>
               <rewrite from="elec_CSP" to="electricity"/>
               <rewrite from="elec_Gen_II_LWR" to="electricity"/>
               <rewrite from="elec_refined liquids (CC)" to="electricity"/>
               <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
               <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
               <rewrite from="elec_Gen_III" to="electricity"/>
               <rewrite from="elec_geothermal" to="electricity"/>
               <rewrite from="elec_biomass (conv)" to="electricity"/>
               <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
               <rewrite from="elec_gas (steam/CT)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
               <rewrite from="elec_coal (IGCC)" to="electricity"/>
               <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
               <rewrite from="elec_CSP_storage" to="electricity"/>
			   <rewrite from="Beef" to="livestock"/>
			   <rewrite from="Dairy" to="livestock"/>
			   <rewrite from="Poultry" to="livestock"/>
			   <rewrite from="SheepGoat" to="livestock"/>
			   <rewrite from="Pork" to="livestock"/>
			   <rewrite from="unconventional oil production" to="mining"/>
			   <rewrite from="nuclearFuelGenIII" to="electricity"/>
			   <rewrite from="nuclearFuelGenII" to="electricity"/>
			   <rewrite from="regional oil" to="mining"/>
			   <rewrite from="regional coal" to="mining"/>
			   <rewrite from="regional natural gas" to="mining"/>
			   <rewrite from="biomass" to="biomass"/>
			   <rewrite from="municipal water" to="municipal"/>
			   <rewrite from="industry" to="industry"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      </aQuery>
	
	<aQuery>
      <region name="Colombia" />
      <supplyDemandQuery title="water consumption by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' (:collapse:) and contains(@name,'water_td')
         and ends-with(@name,'_C')]/demand-physical/node()</xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="elec_coal (conv pul)" to="electricity"/>
               <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
               <rewrite from="elec_gas (CC)" to="electricity"/>
               <rewrite from="elec_gas (CC CCS)" to="electricity"/>
               <rewrite from="elec_CSP" to="electricity"/>
               <rewrite from="elec_Gen_II_LWR" to="electricity"/>
               <rewrite from="elec_refined liquids (CC)" to="electricity"/>
               <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
               <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
               <rewrite from="elec_Gen_III" to="electricity"/>
               <rewrite from="elec_geothermal" to="electricity"/>
               <rewrite from="elec_biomass (conv)" to="electricity"/>
               <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
               <rewrite from="elec_gas (steam/CT)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC)" to="electricity"/>
               <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
               <rewrite from="elec_coal (IGCC)" to="electricity"/>
               <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
               <rewrite from="elec_CSP_storage" to="electricity"/>
			   <rewrite from="Beef" to="livestock"/>
			   <rewrite from="Dairy" to="livestock"/>
			   <rewrite from="Poultry" to="livestock"/>
			   <rewrite from="SheepGoat" to="livestock"/>
			   <rewrite from="Pork" to="livestock"/>
			   <rewrite from="unconventional oil production" to="mining"/>
			   <rewrite from="nuclearFuelGenIII" to="mining"/>
			   <rewrite from="nuclearFuelGenII" to="mining"/>
			   <rewrite from="regional oil" to="mining"/>
			   <rewrite from="regional coal" to="mining"/>
			   <rewrite from="regional natural gas" to="mining"/>
			   <rewrite from="biomass" to="biomass"/>
			   <rewrite from="FiberCrop" to="agriculture"/>
			   <rewrite from="PalmFruit" to="agriculture"/>
			   <rewrite from="SugarCrop" to="agriculture"/>
			   <rewrite from="Corn" to="agriculture"/>
			   <rewrite from="FodderHerb" to="agriculture"/>
			   <rewrite from="MiscCrop" to="agriculture"/>
			   <rewrite from="OilCrop" to="agriculture"/>
			   <rewrite from="Rice" to="agriculture"/>
			   <rewrite from="FodderGrass" to="agriculture"/>
			   <rewrite from="OtherGrain" to="agriculture"/>
			   <rewrite from="Root_Tuber" to="agriculture"/>
			   <rewrite from="Wheat" to="agriculture"/>
			   <rewrite from="municipal water" to="municipal"/>
			   <rewrite from="industry" to="industry"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
	</aQuery>
	
	<aQuery>
      <region name="Colombia" />
      <supplyDemandQuery title="Ag Production by Crop Type">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (exists(child::keyword/@supplysector) or local-name() = 'AgSupplySector' or @name='NonFoodDemand_Forest')]//*[@type='output']/physical-output/node()</xPath>
      </supplyDemandQuery>
    </aQuery>

<aQuery>
      <region name="Colombia" />
     <supplyDemandQuery title="water consumption by water mapping source">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:)]//*[@type='input' and contains(@name,'water_td')
         and ends-with(@name,'_C')]/demand-physical/node()</xPath>
      </supplyDemandQuery>
	</aQuery>

	<aQuery>
      <region name="Colombia" />
     <supplyDemandQuery title="water withdrawals by water mapping source">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:)]//*[@type='input' and contains(@name,'water_td')
         and ends-with(@name,'_W')]/demand-physical/node()</xPath>
      </supplyDemandQuery>
	</aQuery>

<aQuery>
      <region name="Colombia" />
		<query title="aggregated land allocation">
            <axis1 name="LandLeaf">LandLeaf[@crop]</axis1>
            <axis2 name="Year">land-allocation[@year]</axis2>
            <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//land-allocation/text()</xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="LandLeaf">
                  <rewrite from="Corn" to="crops"/>
                  <rewrite from="FiberCrop" to="crops"/>
                  <rewrite from="FodderGrass" to="crops"/>
                  <rewrite from="FodderHerb" to="crops"/>
                  <rewrite from="Forest" to="forest (managed)"/>
                  <rewrite from="Grassland" to="grass"/>
                  <rewrite from="MiscCrop" to="crops"/>
                  <rewrite from="OilCrop" to="crops"/>
                  <rewrite from="OtherArableLand" to="otherarable"/>
                  <rewrite from="OtherGrain" to="crops"/>
                  <rewrite from="PalmFruit" to="crops"/>
                  <rewrite from="Pasture" to="pasture (grazed)"/>
                  <rewrite from="ProtectedGrassland" to="grass"/>
                  <rewrite from="ProtectedShrubland" to="shrubs"/>
                  <rewrite from="ProtectedUnmanagedForest" to="forest (unmanaged)"/>
                  <rewrite from="ProtectedUnmanagedPasture" to="pasture (other)"/>
                  <rewrite from="Rice" to="crops"/>
                  <rewrite from="RockIceDesert" to="rock and desert"/>
                  <rewrite from="RootTuber" to="crops"/>
                  <rewrite from="Shrubland" to="shrubs"/>
                  <rewrite from="SugarCrop" to="crops"/>
                  <rewrite from="Tundra" to="tundra"/>
                  <rewrite from="UnmanagedForest" to="forest (unmanaged)"/>
                  <rewrite from="UnmanagedPasture" to="pasture (other)"/>
                  <rewrite from="UrbanLand" to="urban"/>
                  <rewrite from="Wheat" to="crops"/>
                  <rewrite from="biomassGrass" to="biomass"/>
                  <rewrite from="biomassTree" to="biomass"/>
               </level>
            </labelRewriteList>
         </query>
	</aQuery>

	<aQuery>
      <region name="Colombia" />
         <query title="land allocation by crop">
            <axis1 name="LandLeaf">LandLeaf[@crop]</axis1>
            <axis2 name="Year">land-allocation[@year]</axis2>
            <xPath buildList="true" dataName="LandLeaf" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//land-allocation/text()</xPath>
            <comments/>
         </query>
	</aQuery>

	<aQuery>
      <region name="Colombia" />
            <supplyDemandQuery title="building final energy by fuel">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='building' or (exists(child::keyword[@final-energy='building'])))]//
               *[@type='input']/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
	</aQuery>

	<aQuery>
      <region name="Colombia" />
            <supplyDemandQuery title="transport final energy by fuel">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='input' and not (@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
               <comments/>
            </supplyDemandQuery>
	</aQuery>

	<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="industry final energy by fuel">
               <axis1 name="input">input</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='industry' or (exists(child::keyword[@final-energy='industry'])))]//
               *[@type='input' and (@name='delivered biomass' or @name='delivered coal' or
               @name='H2 enduse' or @name='elect_td_ind' or @name='wholesale gas' or
               @name='refined liquids industrial')]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
	</aQuery>

	<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="transport service output by mode">
               <axis1 name="mode">subsector</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']//*[@type='output' (:collapse:) and not(@name='CAFEcredit')]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
	</aQuery>

	<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="building final energy by subsector">
               <axis1 name="subsector">subsector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='building' or (exists(child::keyword[@final-energy='building'])))]/
               *[@type='subsector']//*[@type='input' (:collapse:)]/demand-physical/node()</xPath>
               <comments/>
            </supplyDemandQuery>
	</aQuery>

	<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="transport service output by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:) and not (@name='CAFEcredit')]/
               physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
	</aQuery>

<aQuery>
       <region name="Colombia" />
         <supplyDemandQuery title="CO2 emissions by sector (no bio)">
            <axis1 name="sector">sector[@name]</axis1>
            <axis2 name="Year">emissions[@year]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"> <![CDATA[
            declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
            let $scn := $parent/ancestor::scenario,
            $rgn := $parent (: /ancestor::region :)
            return
            document { element scenario {
            $scn/@*,
            element region {
            $rgn/@*,
            $append
            }
            }
            }
            (: I can get by with just the scenario and region
            let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
            return
            if(local-name($parent) != 'scenario')
            then local:append-heirarchy($parent/parent::*, $new_node)
            else document { $new_node } :)
            }; 
            declare function local:get-carbon-coef($good as xs:string) as xs:decimal {
            let $carbonCoefs := (
            <PrimaryFuelCO2Coef name="biomass">0</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="crude oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas pipeline">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas processing">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="limestone">0.08</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids enduse">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids industrial">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refining">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomassOil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional corn for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional sugar for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="traded unconventional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil">21.1</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil production">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="wholesale gas">14.2</PrimaryFuelCO2Coef>),
            $currCoef := $carbonCoefs[@name=$good]/text()
            return if(exists($currCoef)) then $currCoef else 0.0
            };
            
            
            declare function local:is-carbonatious-fuel($good as xs:string) as xs:boolean {
            not(local:get-carbon-coef($good) = 0.0)
            };
            declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
            if(empty($inputNameQueue)) then $coefs
            else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('traded unconventional oil'),
            $inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]) or not(local:is-carbonatious-fuel($inputNameQueue[1])))
            then 
            local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
            else
            let $inputName := $inputNameQueue[1],
            $newInputNameQueue := remove($inputNameQueue, 1),
            $useInputs := $currTree//*[@type='input' and @name=$inputName],
            $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
            $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
            return element input {
            attribute vintage { $vintage },
            text {
            sum($useInputs/demand-physical[@vintage=$vintage])
            }
            },
            $new_coefs := if(empty($useSectors)) then
            $coefs
            else
            $coefs | element sector {
            attribute name { $inputName },
            for $output in $useSectors
            return element output {
            attribute name { $output },
            for $inputSum in $totalInputSum
            let $currSectorInputs := $useInputs[ancestor::*[@type='sector' and @name=$output]],
            $outputSum := sum($currSectorInputs/demand-physical[@vintage=$inputSum/@vintage]),
            $carbonIn := sum($currSectorInputs/parent::*//carbon-content[@vintage=$inputSum/@vintage]),
            $carbonOut := sum($currSectorInputs/parent::*/output-primary/physical-output[@vintage=$inputSum/@vintage]) *
            local:get-carbon-coef($output)
            return (element share {
            attribute vintage { $inputSum/@vintage },
            text { $outputSum div $inputSum }
            }, element carbon_ratio {
            attribute vintage { $inputSum/@vintage },
            text{ if($carbonIn > 0) then $carbonOut div $carbonIn else 0 }
            })
            }
            }
            return 
            local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
            };
            declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
            if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
            for $output in $coefs[@name=$outputName]/output
            let $emiss_go := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            },
            $emiss_stay := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := 1.0 - $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage 
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            }
            return local:apply-coefs($output/@name, $emiss_go, $coefs) |
            element sector {
            attribute name { $output/@name},
            attribute type { 'sector' },
            $emiss_stay
            }
            else if( abs(sum($emissions)) > 0.001) then
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' },
            $emissions
            }
            else
            (: These are the residuals from chasing simulenaties, I've left this here
            for debuging purposes :)
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' }(:,
            $emissions:)
            }
            };
            declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
            (:unordered { :) 	
            let $regionsG := if(not($regions[1] = 'Global'))
            then $regions
            else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
            return
            for $scenario in $scenarios, 	    
            $region in $regionsG 	
            let $scenario_split := tokenize($scenario, ' '), 	    
            $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
            $sector_emiss := $currTree/*[@type='sector' and not(@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')]//CO2[@type='GHG' (:collapse:) and @name='CO2']/emissions/text(),
            $currEmissSectors := $currTree/*[@type='sector' and (@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')],
            $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false()),
            $downstream_emiss := for $sectorName in distinct-values($currEmissSectors/@name)
            return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2[@name='CO2']/emissions, $coefs))//text() 
            return ($sector_emiss, $downstream_emiss )
            (:  } :)
            };
            local:run-emiss-by-enduse((:scenarios:), (:regions:), (:collection:))
            ]]>
         </xPath>
            <comments/>
            <labelRewriteList append-values="false">
               <level name="sector">
                  <rewrite from="elec_coal (conv pul)" to="electricity"/>
                  <rewrite from="elec_gas (CC)" to="electricity"/>
                  <rewrite from="elec_CSP" to="electricity"/>
                  <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                  <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                  <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                  <rewrite from="elec_Gen_III" to="electricity"/>
                  <rewrite from="elec_geothermal" to="electricity"/>
                  <rewrite from="elec_biomass (conv)" to="electricity"/>
                  <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                  <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                  <rewrite from="elec_coal (IGCC)" to="electricity"/>
                  <rewrite from="elec_CSP_storage" to="electricity"/>
               </level>
            </labelRewriteList>
         </supplyDemandQuery>
	</aQuery>

 <aQuery>
       <region name="Colombia" />
      <emissionsQueryBuilder title="nonCO2 emissions by resource production">
         <axis1 name="GHG">GHG</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'resource']//*[@type = 'GHG']/emissions/node()</xPath>
         <comments/>
      </emissionsQueryBuilder>
    </aQuery>

<aQuery>
       <region name="Colombia" />
		<supplyDemandQuery title="transport final energy by mode and fuel">
               <axis1 name="mode">subsector</axis1>
               <axis2 name="Year">demand-physical[@vintage]</axis2>
               <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']//*[@type='input' and not (@name='renewable')]/
               demand-physical[@unit='EJ']/node()</xPath>
               <comments/>
            </supplyDemandQuery>
    </aQuery>

	<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="elec gen by gen tech and cooling tech and vintage">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='electricity' or @name='elect_td_bld' or
                  contains(@name,'elec_')) and not(contains(@name, 'water_td'))]/
                  *[@type='subsector' and not (@name='elect_td_bld')]/
                  *[@type='technology' and not(@name='biomass (conv)' or @name='biomass (conv CCS)' or @name='biomass (IGCC)' or @name='biomass (IGCC CCS)'
                                   or @name='coal (conv pul)' or @name='coal (conv pul CCS)' or @name='coal (IGCC)' or @name='coal (IGCC CCS)'
                                   or @name='gas (steam/CT)' or @name='gas (CC)' or @name='gas (CC CCS)'
                                   or @name='refined liquids (steam/CT)' or @name='refined liquids (CC)' or @name='refined liquids (CC CCS)'
                                   or @name='geothermal' or @name='Gen_II_LWR' or @name='Gen_III'
                                   or @name='CSP' or @name='CSP_storage')]/
                  *[@type='output']/physical-output/node()
               </xPath>
               <comments/>
               <labelRewriteList append-values="false">
                  <level name="sector">
                     <rewrite from="elec_gas (CC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC CCS)" to="electricity"/>
                     <rewrite from="elec_gas (CC)" to="electricity"/>
                     <rewrite from="elec_coal (conv pul CCS)" to="electricity"/>
                     <rewrite from="elec_CSP" to="electricity"/>
                     <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                     <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                     <rewrite from="elec_Gen_III" to="electricity"/>
                     <rewrite from="elec_geothermal" to="electricity"/>
                     <rewrite from="elec_refined liquids (CC CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (conv)" to="electricity"/>
                     <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                     <rewrite from="elec_biomass (conv CCS)" to="electricity"/>
                     <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                     <rewrite from="elec_coal (IGCC)" to="electricity"/>
                     <rewrite from="elec_CSP_storage" to="electricity"/>
                  </level>
                  <level name="subsector">
                     <rewrite from="biomass (IGCC CCS)" to="biomass"/>
                     <rewrite from="biomass (IGCC)" to="biomass"/>
                     <rewrite from="coal (IGCC CCS)" to="coal"/>
                     <rewrite from="CSP" to="solar"/>
                     <rewrite from="Gen_III" to="nuclear"/>
                     <rewrite from="refined liquids (CC CCS)" to="refined liquids"/>
                     <rewrite from="gas (CC)" to="gas"/>
                     <rewrite from="Gen_II_LWR" to="nuclear"/>
                     <rewrite from="coal (conv pul CCS)" to="coal"/>
                     <rewrite from="biomass (conv)" to="biomass"/>
                     <rewrite from="gas (steam/CT)" to="gas"/>
                     <rewrite from="coal (conv pul)" to="coal"/>
                     <rewrite from="gas (CC CCS)" to="gas"/>
                     <rewrite from="refined liquids (CC)" to="refined liquids"/>
                     <rewrite from="coal (IGCC)" to="coal"/>
                     <rewrite from="biomass (conv CCS)" to="biomass"/>
                     <rewrite from="CSP_storage" to="solar"/>
                     <rewrite from="refined liquids (steam/CT)" to="refined liquids"/>
                  </level>
               </labelRewriteList>
               <showAttribute attribute-name="year" level="technology"/>
            </supplyDemandQuery>
      </aQuery>

	<aQuery>
       <region name="Colombia" />
			<supplyDemandQuery title="gas production by tech">
               <axis1 name="technology">technology</axis1>
               <axis2 name="Year">physical-output[@vintage]</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='gas processing')]/*[@type='subsector']/
               *[@type='technology']/*[@type='output' (:collapse:)]/physical-output/node()</xPath>
               <comments/>
            </supplyDemandQuery>
	</aQuery>

<aQuery> 
	<region name="USA" />
		<supplyDemandQuery title="Crop exports">
			<axis1 name="input">input</axis1>
			<axis2 name="Year">demand-physical[@vintage]</axis2>
			<xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' 
              and (@name='traded corn' or @name='traded biomass' or
            @name='traded fibercrop' or @name='traded misccrop' or 
            @name='traded oilcrop' or @name='traded othergrain' or @name='traded palmfruit' or
            @name='traded rice' or @name='traded roottuber'or @name='traded sugarcrop' or
            @name='traded wheat')]/*[@type='subsector']//*[@type='input' ]/
               demand-physical/node()
			</xPath>
			<comments>All crop exports stored under region name USA</comments>
		</supplyDemandQuery>
</aQuery>


<aQuery>
    <supplyDemandQuery title="Quantity available for crop commodity demand (domestic and imported)">
                <axis1 name="technology">technology</axis1>
                <axis2 name="Year">demand-physical[@vintage]</axis2>
                <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' 
              ]/*[@type='subsector' and (@name='domestic corn' or @name='imported corn' or @name='domestic biomass' or @name='imported biomass' or
            @name='domestic fibercrop' or @name='imported fibercrop' or @name='domestic misccrop' or @name='imported misccrop' or
            @name='domestic oilcrop' or @name='imported oilcrop' or @name='domestic othergrain' or @name='imported othergrain' or @name='domestic palmfruit' or @name='imported palmfruit' or
            @name='domestic rice' or @name='imported rice' or @name='domestic root_tuber'or @name='imported root_tuber' or @name='domestic sugarcrop' or @name='imported sugarcrop' or
            @name='domestic wheat' or @name='imported wheat' or @name='FodderGrass'or @name='FodderHerb' or @name='Forest')]/*[@type='technology']//*[@type='input' ]/
               demand-physical/node()</xPath>
                <comments/>
            </supplyDemandQuery>
</aQuery>

<aQuery>
<region name="Colombia" />
<supplyDemandQuery title="regional ag commodity sources">
    <axis1 name="input">input</axis1>
    <axis2 name="Year">demand-physical[@vintage]</axis2>
    <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and contains(@name, 'regional')]/*[@type='subsector']//*[@type='input']/demand-physical[@unit='Mt']/node()</xPath>
    <comments>
    </comments>
</supplyDemandQuery>
</aQuery>

<aQuery>
<region name="USA" />
<region name="Global" />
<supplyDemandQuery title="traded ag commodity sources">
    <axis1 name="input">input</axis1>
    <axis2 name="Year">demand-physical[@vintage]</axis2>
    <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and contains(@name, 'traded')]/*[@type='subsector']//*[@type='input']/demand-physical[@unit='Mt']/node()</xPath>
    <comments>
    </comments>
</supplyDemandQuery>
</aQuery>

	<aQuery>
       <region name="Colombia" />
			<supplyDemandQuery title="building floorspace">
               <axis1 name="building">gcam-consumer[@name]</axis1>
               <axis2 name="Year">floorspace[@year]</axis2>
               <xPath buildList="true" dataName="floorspace" group="false" sumAll="false">gcam-consumer//floorspace/node()</xPath>
               <comments/>
            </supplyDemandQuery>
	</aQuery>

	<aQuery>
       <region name="Colombia" />
         <supplyDemandQuery title="demand balances by meat and dairy commodity">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' and
            (@name='Beef' or @name='Pork' or @name='Poultry' or @name='SheepGoat' or @name='OtherMeat_Fish')]/
            demand-physical/node()</xPath>
            <comments/>
         </supplyDemandQuery>
	</aQuery>

	<aQuery>
       <region name="Colombia" />
         <supplyDemandQuery title="demand balances by crop commodity">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' and
            (@name='regional corn' or @name='regional fibercrop'
               or @name='regional misccrop' or @name='regional oilcrop' or @name='regional othergrain'
               or @name='regional palmfruit' or @name='regional rice' or @name='regional root_tuber'
               or @name='regional sugarcrop' or @name='regional wheat' or @name='FodderGrass' or @name='FodderHerb'
               or @name='Forest' or @name='Pasture')]/
               demand-physical/node()</xPath>
            <comments/>
         </supplyDemandQuery>
	</aQuery>

	<aQuery>
       <region name="Colombia" />
         <supplyDemandQuery title="ag commodity prices">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/cost/text()</xPath>
            <comments/>
         </supplyDemandQuery>
	</aQuery>

	<aQuery>
       <region name="Colombia" />
            <supplyDemandQuery title="meat and dairy prices">
               <axis1 name="sector">sector</axis1>
               <axis2 name="Year">cost</axis2>
               <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]/
               cost/text()</xPath>
               <comments/>
            </supplyDemandQuery>
	</aQuery>

	<aQuery>
       <region name="Colombia" />
         <supplyDemandQuery title="resource production">
            <axis1 name="resource">resource</axis1>
            <axis2 name="Year">output</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='resource']//output/node()</xPath>
            <comments/>
         </supplyDemandQuery>
	</aQuery>

	<aQuery>
       <region name="Colombia" />
         <supplyDemandQuery title="total final energy by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' (:collapse:) and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn_') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
            <comments/>
         </supplyDemandQuery>
	</aQuery>

<aQuery>
		<all-regions/>
         <emissionsQueryBuilder title="nonCO2 emissions by region">
            <axis1 name="GHG">GHG</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:) or @type = 'resource' (:collapse:)](: / *[@type = 'subresource' (: collapse :)] :)//
            *[@type = 'GHG']/emissions/node()</xPath>
            <comments/>
         </emissionsQueryBuilder>
 </aQuery>

 <aQuery>
		<all-regions/>
<emissionsQueryBuilder title="nonCO2 emissions by sector (incl resources)">
			<axis1 name="sector">sector</axis1>
			<axis2 name="Year">emissions</axis2>
			<xPath buildList="true" dataName="emissions" group="false" sumAll="false">
			<![CDATA[
              declare function local:deep-copy($nodes as node()*) as node()* {
              for $node in $nodes
              return typeswitch($node)
              case $e as element()
              return element { local-name($e) } {
              $e/@*,
              for $c in $e/(* | text())
              return local:deep-copy($c)
              }
              default return $node
              };
              declare function local:rename-resource-emiss($resources as node()*) as node()* {
              for $resource in $resources
              let $scn := $resource/ancestor::scenario,
              $rgn := $resource/ancestor::region,
              $retDoc := document { element scenario {
              $scn/@*,
              element region {
              $rgn/@*,
              element sector {
              attribute type { 'sector' },
              $resource/@name,
              element subsector {
              attribute type { 'subsector' },
              $resource/@name,
              element technology {
              attribute type { 'technology' },
              $resource/@name,
              local:deep-copy($resource/*[@type='GHG'])
              }
              }
              }
              }
              }
              }
              return
              $retDoc//text()
              };
declare function local:rename-subresource-emiss($resources as node()*) as node()* {
              for $resource in $resources
              let $scn := $resource/ancestor::scenario,
              $rgn := $resource/ancestor::region,
$rsrc := $resource/ancestor::*[@type='resource'],
$subrsrc := $resource/ancestor::*[@type='subresource'],
$tech := $resource/ancestor::*[@type='technology'],
              $retDoc := document { element scenario {
              $scn/@*,
              element region {
              $rgn/@*,
              element sector {
              attribute type { 'sector' },
              $rsrc/@name,
              element subsector {
              attribute type { 'subsector' },
              $subrsrc/@name,
              element technology {
              attribute type { 'technology' },
              $tech/@name,
              local:deep-copy($resource)
              }
              }
              }
              }
              }
              }
              return
              $retDoc//text()
              };
              declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* {
              let $regionsG := if(not($regions[1] = 'Global'))
              then $regions
              else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
              return
              for $scenario in $scenarios,
              $region in $regionsG
              let $scenario_split := tokenize($scenario, ' '),
              $scenario_name := string-join($scenario_split[position() < last()], ' '),
              $scenario_date := $scenario_split[last()],
              $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
              return (: rename resources as a sector/subsector/tech :)
              local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type='GHG'])])
| (: get resource emiss in tech :)
              local:rename-subresource-emiss($currTree/*[@type='resource']/*[@type='subresource']/*[@type='technology' (: collapse :)]/*[@type='GHG'])
              | (: get the sector emissions :)
              $currTree/*[@type = 'sector']//*[@type = 'GHG']/emissions/node()
              };
              local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))
          ]]>
          </xPath>
          <comments/>
          <labelRewriteList append-values="true">
              <level name="GHG">
                  <rewrite from="BC_AWB" to="BC"/>
                  <rewrite from="C2F6" to="C2F6"/>
                  <rewrite from="CF4" to="CF4"/>
                  <rewrite from="HFC125" to="HFC125"/>
                  <rewrite from="HFC134a" to="HFC134a"/>
                  <rewrite from="HFC245fa" to="HFC245fa"/>
                  <rewrite from="SF6" to="SF6"/>
                  <rewrite from="CH4_AGR" to="CH4"/>
                  <rewrite from="CH4_AWB" to="CH4"/>
                  <rewrite from="CO_AWB" to="CO"/>
                  <rewrite from="N2O_AGR" to="N2O"/>
                  <rewrite from="N2O_AWB" to="N2O"/>
                  <rewrite from="NH3_AGR" to="NH3"/>
                  <rewrite from="NH3_AWB" to="NH3"/>
                  <rewrite from="NMVOC" to="VOC"/>
                  <rewrite from="NMVOC_AGR" to="VOC"/>
                  <rewrite from="NMVOC_AWB" to="VOC"/>
                  <rewrite from="NOx_AGR" to="NOx"/>
                  <rewrite from="NOx_AWB" to="NOx"/>
                  <rewrite from="SO2_1" to="SO2"/>
                  <rewrite from="SO2_1_AWB" to="SO2"/>
                  <rewrite from="SO2_2" to="SO2"/>
                  <rewrite from="SO2_2_AWB" to="SO2"/>
                  <rewrite from="SO2_3" to="SO2"/>
                  <rewrite from="SO2_3_AWB" to="SO2"/>
                  <rewrite from="SO2_4" to="SO2"/>
                  <rewrite from="SO2_4_AWB" to="SO2"/>
              </level>
          </labelRewriteList>
      </emissionsQueryBuilder>
 </aQuery>

 <aQuery>
		<all-regions/>
<emissionsQueryBuilder title="International Aviation emissions">
<axis1 name="subsector">subsector</axis1><axis2 name="Year">emissions</axis2>
<xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type = 'subsector' and (@name='International Aviation')]//*[@type = 'GHG']/emissions/node()</xPath>
<comments>This query will not include resource emissions</comments>
</emissionsQueryBuilder>
 </aQuery>

 <aQuery>
		<all-regions/>
<emissionsQueryBuilder title="International Shipping emissions">
<axis1 name="subsector">subsector</axis1><axis2 name="Year">emissions</axis2>
<xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type = 'subsector' and (@name='International Ship')]//*[@type = 'GHG']/emissions/node()</xPath>
<comments>This query will not include resource emissions</comments>
</emissionsQueryBuilder>
 </aQuery>


</queries>
